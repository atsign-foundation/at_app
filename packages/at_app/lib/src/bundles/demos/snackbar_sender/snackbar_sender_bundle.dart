// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint, implicit_dynamic_list_literal, implicit_dynamic_map_literal, inference_failure_on_collection_literal

import 'package:mason/mason.dart';

final snackbarSenderBundle = MasonBundle.fromJson(<String, dynamic>{
  "files": [
    {
      "path": "lib/main.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmFzeW5jJzsKaW1wb3J0ICdkYXJ0Om1hdGgnOwoKaW1wb3J0ICdwYWNrYWdlOmF0X29uYm9hcmRpbmdfZmx1dHRlci9hdF9vbmJvYXJkaW5nX2ZsdXR0ZXIuZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6YXRfY2xpZW50X21vYmlsZS9hdF9jbGllbnRfbW9iaWxlLmRhcnQnOwoKaW1wb3J0ICdwYWNrYWdlOmF0X3V0aWxzL2F0X2xvZ2dlci5kYXJ0JyBzaG93IEF0U2lnbkxvZ2dlcjsKaW1wb3J0ICdwYWNrYWdlOnBhdGhfcHJvdmlkZXIvcGF0aF9wcm92aWRlci5kYXJ0JyBzaG93IGdldEFwcGxpY2F0aW9uU3VwcG9ydERpcmVjdG9yeTsKaW1wb3J0ICdwYWNrYWdlOmF0X2FwcF9mbHV0dGVyL2F0X2FwcF9mbHV0dGVyLmRhcnQnIHNob3cgQXRFbnY7CgovL1N0cmluZyBzbmFjayA9ICcnOwpGdXR1cmU8dm9pZD4gbWFpbigpIGFzeW5jIHsKICBhd2FpdCBBdEVudi5sb2FkKCk7CiAgcnVuQXBwKGNvbnN0IE15QXBwKCkpOwp9CgpGdXR1cmU8QXRDbGllbnRQcmVmZXJlbmNlPiBsb2FkQXRDbGllbnRQcmVmZXJlbmNlKCkgYXN5bmMgewogIHZhciBkaXIgPSBhd2FpdCBnZXRBcHBsaWNhdGlvblN1cHBvcnREaXJlY3RvcnkoKTsKICByZXR1cm4gQXRDbGllbnRQcmVmZXJlbmNlKCkKICAgICAgICAuLnJvb3REb21haW4gPSBBdEVudi5yb290RG9tYWluCiAgICAgICAgLi5uYW1lc3BhY2UgPSBBdEVudi5hcHBOYW1lc3BhY2UKICAgICAgICAuLmhpdmVTdG9yYWdlUGF0aCA9IGRpci5wYXRoCiAgICAgICAgLi5jb21taXRMb2dQYXRoID0gZGlyLnBhdGgKICAgICAgICAuLmlzTG9jYWxTdG9yZVJlcXVpcmVkID0gdHJ1ZQogICAgICAvLyBUT0RPIHNldCB0aGUgcmVzdCBvZiB5b3VyIEF0Q2xpZW50UHJlZmVyZW5jZSBoZXJlCiAgICAgIDsKfQoKY2xhc3MgTXlBcHAgZXh0ZW5kcyBTdGF0ZWZ1bFdpZGdldCB7CiAgY29uc3QgTXlBcHAoe0tleT8ga2V5fSkgOiBzdXBlcihrZXk6IGtleSk7CiAgQG92ZXJyaWRlCiAgX015QXBwU3RhdGUgY3JlYXRlU3RhdGUoKSA9PiBfTXlBcHBTdGF0ZSgpOwp9CgpjbGFzcyBfTXlBcHBTdGF0ZSBleHRlbmRzIFN0YXRlPE15QXBwPiB7CiAgLy8gKiBsb2FkIHRoZSBBdENsaWVudFByZWZlcmVuY2UgaW4gdGhlIGJhY2tncm91bmQKICBGdXR1cmU8QXRDbGllbnRQcmVmZXJlbmNlPiBmdXR1cmVQcmVmZXJlbmNlID0gbG9hZEF0Q2xpZW50UHJlZmVyZW5jZSgpOwogIEF0Q2xpZW50UHJlZmVyZW5jZT8gYXRDbGllbnRQcmVmZXJlbmNlOwoKICAvLyBpZ25vcmU6IHVudXNlZF9maWVsZAogIGZpbmFsIEF0U2lnbkxvZ2dlciBfbG9nZ2VyID0gQXRTaWduTG9nZ2VyKEF0RW52LmFwcE5hbWVzcGFjZSk7CgogIEBvdmVycmlkZQogIFdpZGdldCBidWlsZChCdWlsZENvbnRleHQgY29udGV4dCkgewogICAgcmV0dXJuIE1hdGVyaWFsQXBwKAogICAgICAvLyAqIFRoZSBvbmJvYXJkaW5nIHNjcmVlbiAoZmlyc3Qgc2NyZWVuKQogICAgICBob21lOiBTY2FmZm9sZCgKICAgICAgICBhcHBCYXI6IEFwcEJhcigKICAgICAgICAgIHRpdGxlOiBjb25zdCBUZXh0KCdTZW5kIHlvdXJzZWxmIGEgU25hY2tiYXInKSwKICAgICAgICApLAogICAgICAgIGJvZHk6IEJ1aWxkZXIoCiAgICAgICAgICBidWlsZGVyOiAoY29udGV4dCkgPT4gQ2VudGVyKAogICAgICAgICAgICBjaGlsZDogRWxldmF0ZWRCdXR0b24oCiAgICAgICAgICAgICAgb25QcmVzc2VkOiAoKSBhc3luYyB7CiAgICAgICAgICAgICAgICBBdE9uYm9hcmRpbmdSZXN1bHQgb25ib2FyZGluZ1Jlc3VsdCA9IGF3YWl0IEF0T25ib2FyZGluZy5vbmJvYXJkKAogICAgICAgICAgICAgICAgICBjb250ZXh0OiBjb250ZXh0LAogICAgICAgICAgICAgICAgICBjb25maWc6IEF0T25ib2FyZGluZ0NvbmZpZygKICAgICAgICAgICAgICAgICAgICBhdENsaWVudFByZWZlcmVuY2U6IGF3YWl0IGZ1dHVyZVByZWZlcmVuY2UsCiAgICAgICAgICAgICAgICAgICAgcm9vdEVudmlyb25tZW50OiBBdEVudi5yb290RW52aXJvbm1lbnQsCiAgICAgICAgICAgICAgICAgICAgZG9tYWluOiBBdEVudi5yb290RG9tYWluLAogICAgICAgICAgICAgICAgICAgIGFwcEFQSUtleTogQXRFbnYuYXBwQXBpS2V5LAogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIHN3aXRjaCAob25ib2FyZGluZ1Jlc3VsdC5zdGF0dXMpIHsKICAgICAgICAgICAgICAgICAgY2FzZSBBdE9uYm9hcmRpbmdSZXN1bHRTdGF0dXMuc3VjY2VzczoKICAgICAgICAgICAgICAgICAgICBOYXZpZ2F0b3IucHVzaChjb250ZXh0LCBNYXRlcmlhbFBhZ2VSb3V0ZShidWlsZGVyOiAoXykgPT4gY29uc3QgSG9tZVNjcmVlbigpKSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgIGNhc2UgQXRPbmJvYXJkaW5nUmVzdWx0U3RhdHVzLmVycm9yOgogICAgICAgICAgICAgICAgICAgIFNjYWZmb2xkTWVzc2VuZ2VyLm9mKGNvbnRleHQpLnNob3dTbmFja0JhcigKICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IFNuYWNrQmFyKAogICAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IENvbG9ycy5yZWQsCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFRleHQoJ0FuIGVycm9yIGhhcyBvY2N1cnJlZCcpLAogICAgICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICBjYXNlIEF0T25ib2FyZGluZ1Jlc3VsdFN0YXR1cy5jYW5jZWw6CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBjaGlsZDogY29uc3QgVGV4dCgnT25ib2FyZCBhbiBAc2lnbicpLAogICAgICAgICAgICApLAogICAgICAgICAgKSwKICAgICAgICApLAogICAgICApLAogICAgKTsKICB9Cn0KCi8vKiBUaGUgbmV4dCBzY3JlZW4gYWZ0ZXIgb25ib2FyZGluZyAoc2Vjb25kIHNjcmVlbikKY2xhc3MgSG9tZVNjcmVlbiBleHRlbmRzIFN0YXRlZnVsV2lkZ2V0IHsKICBjb25zdCBIb21lU2NyZWVuKHtLZXk/IGtleX0pIDogc3VwZXIoa2V5OiBrZXkpOwoKICBAb3ZlcnJpZGUKICBTdGF0ZTxIb21lU2NyZWVuPiBjcmVhdGVTdGF0ZSgpID0+IF9Ib21lU2NyZWVuU3RhdGUoKTsKfQoKY2xhc3MgX0hvbWVTY3JlZW5TdGF0ZSBleHRlbmRzIFN0YXRlPEhvbWVTY3JlZW4+IHsKICBTbmFjayBsYXN0c25hY2sgPSBTbmFjayhzbmFjazogJ25vbmUnKTsKICBAb3ZlcnJpZGUKICBXaWRnZXQgYnVpbGQoQnVpbGRDb250ZXh0IGNvbnRleHQpIHsKICAgIEF0Q2xpZW50IGF0Q2xpZW50ID0gQXRDbGllbnRNYW5hZ2VyLmdldEluc3RhbmNlKCkuYXRDbGllbnQ7CiAgICBTdHJpbmc/IGN1cnJlbnRBdHNpZ247CgogICAgY3VycmVudEF0c2lnbiA9IGF0Q2xpZW50LmdldEN1cnJlbnRBdFNpZ24oKTsKICAgIHJldHVybiBTY2FmZm9sZCgKICAgICAgYXBwQmFyOiBBcHBCYXIoCiAgICAgICAgdGl0bGU6IGNvbnN0IFRleHQoJ1NuYWNrYmFyIHNlbmRlcicpLAogICAgICApLAogICAgICBib2R5OiBDZW50ZXIoCiAgICAgICAgY2hpbGQ6IENvbHVtbigKICAgICAgICAgIGNoaWxkcmVuOiBbCiAgICAgICAgICAgIGNvbnN0IFRleHQoJ1N1Y2Nlc3NmdWxseSBvbmJvYXJkZWQgYW5kIG5hdmlnYXRlZCB0byBGaXJzdEFwcFNjcmVlbicpLAogICAgICAgICAgICBUZXh0KCdDdXJyZW50IEBzaWduOiAkY3VycmVudEF0c2lnbicpLAogICAgICAgICAgICBjb25zdCBTcGFjZXIoZmxleDogMSksCiAgICAgICAgICAgIGNvbnN0IFRleHQoJ1NlbmQgeW91cnNlbGYgYSBzbmFja2JhcicpLAogICAgICAgICAgICBFbGV2YXRlZEJ1dHRvbigKICAgICAgICAgICAgICBvblByZXNzZWQ6ICgpIHsKICAgICAgICAgICAgICAgIHNlbmRBdHNpZ25EYXRhLmNhbGwoY29udGV4dCwgbGFzdHNuYWNrKTsKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIGNoaWxkOiBjb25zdCBUZXh0KCdTZW5kIGEgc25hY2snKSwKICAgICAgICAgICAgKSwKICAgICAgICAgICAgY29uc3QgU3BhY2VyKAogICAgICAgICAgICAgIGZsZXg6IDEsCiAgICAgICAgICAgICksCiAgICAgICAgICBdLAogICAgICAgICksCiAgICAgICksCiAgICApOwogIH0KfQoKdm9pZCBzZW5kQXRzaWduRGF0YShjb250ZXh0LCBTbmFjayBsYXN0c25hY2spIGFzeW5jIHsKICBBdENsaWVudCBhdENsaWVudCA9IEF0Q2xpZW50TWFuYWdlci5nZXRJbnN0YW5jZSgpLmF0Q2xpZW50OwoKICBGdXR1cmU8QXRDbGllbnRQcmVmZXJlbmNlPiBmdXR1cmVQcmVmZXJlbmNlID0gbG9hZEF0Q2xpZW50UHJlZmVyZW5jZSgpOwoKICB2YXIgcHJlZmVyZW5jZSA9IGF3YWl0IGZ1dHVyZVByZWZlcmVuY2U7CgogIHZhciBzbmFja3MgPSBbCiAgICAnIE1pbGt5IFdheScsCiAgICAnIERpbWUgQmFyJywKICAgICcgQ3J1bmNoeSBCYXInLAogICAgJyBNYXJzIEJhcicsCiAgICAnIFNuaWNrZXJzIEJhcicsCiAgICAnIFphZ251dCBCYXInLAogICAgJ24gQWxtb25kIEpveSBCYXInLAogICAgJyAzIE11c2tldGVlcnMgQmFyJywKICAgICcgQ2xhcmsgQmFyJywKICAgICcgQ2FyYW1lbGxvIEJhcicsCiAgICAnIFR3aXggQmFyJywKICAgICcgS2l0S2F0IEJhcicsCiAgXTsKICBTdHJpbmc/IGN1cnJlbnRBdHNpZ247CiAgYXRDbGllbnQuc2V0UHJlZmVyZW5jZXMocHJlZmVyZW5jZSk7CiAgY3VycmVudEF0c2lnbiA9IGF0Q2xpZW50LmdldEN1cnJlbnRBdFNpZ24oKTsKCiAgdmFyIG1ldGFEYXRhID0gTWV0YWRhdGEoKQogICAgLi5pc1B1YmxpYyA9IHRydWUKICAgIC4uaXNFbmNyeXB0ZWQgPSB0cnVlCiAgICAuLm5hbWVzcGFjZUF3YXJlID0gdHJ1ZQogICAgLi50dGwgPSAxMDAwMDA7CgogIHZhciBrZXkgPSBBdEtleSgpCiAgICAuLmtleSA9ICdzbmFja2JhcicKICAgIC4uc2hhcmVkQnkgPSBjdXJyZW50QXRzaWduCiAgICAuLnNoYXJlZFdpdGggPSBudWxsCiAgICAuLm1ldGFkYXRhID0gbWV0YURhdGE7CgogIC8vIFRoZSBtYWdpYyBsaW5lIHRvIHNlbmQgdGhlIHNuYWNrCiAgU25hY2sgc25hY2tiYXIgPSBTbmFjayhzbmFjazogc25hY2tzW1JhbmRvbSgpLm5leHRJbnQoc25hY2tzLmxlbmd0aCldKTsKICAvLyBNYWtlIHN1cmUgd2Ugc2VuZCBhIGZyZXNoIHNuYWNrICEKICB3aGlsZSAobGFzdHNuYWNrLnNuYWNrID09IHNuYWNrYmFyLnNuYWNrKSB7CiAgICBzbmFja2JhciA9IFNuYWNrKHNuYWNrOiBzbmFja3NbUmFuZG9tKCkubmV4dEludChzbmFja3MubGVuZ3RoKV0pOwogIH0KICBhd2FpdCBhdENsaWVudC5wdXQoa2V5LCBzbmFja2Jhci50b0pzb24oKS50b1N0cmluZygpKTsKICBwb3BTbmFja0Jhcihjb250ZXh0LCBzbmFja2Jhci5zbmFjayk7Cn0KCnZvaWQgcG9wU25hY2tCYXIoY29udGV4dCwgU3RyaW5nIHNuYWNrKSB7CiAgZmluYWwgc25hY2tCYXIgPSBTbmFja0JhcigKICAgIGNvbnRlbnQ6IFRleHQoJ1dlIGp1c3Qgc2VudC4gQSRzbmFjayAhICcpLAogICAgYWN0aW9uOiBTbmFja0JhckFjdGlvbigKICAgICAgbGFiZWw6ICdVbmRvJywKICAgICAgb25QcmVzc2VkOiAoKSB7CiAgICAgICAgLy8gU29tZSBjb2RlIHRvIHVuZG8gdGhlIGNoYW5nZS4KICAgICAgfSwKICAgICksCiAgKTsKCiAgU2NhZmZvbGRNZXNzZW5nZXIub2YoY29udGV4dCkuc2hvd1NuYWNrQmFyKHNuYWNrQmFyKTsKfQoKY2xhc3MgU25hY2sgewogIFN0cmluZyBzbmFjazsKCiAgU25hY2soewogICAgcmVxdWlyZWQgdGhpcy5zbmFjaywKICB9KTsKCiAgU25hY2suZnJvbUpzb24oTWFwPFN0cmluZywgZHluYW1pYz4ganNvbikgOiBzbmFjayA9IGpzb25bJ3NuYWNrJ107CgogIE1hcDxTdHJpbmcsIGR5bmFtaWM+IHRvSnNvbigpID0+IHsKICAgICAgICAnInNuYWNrIic6ICciJHNuYWNrIicsCiAgICAgIH07Cn0K",
      "type": "text"
    }
  ],
  "hooks": [],
  "name": "snackbar_sender",
  "description": "Send snackbars to a flutter web application publically.",
  "version": "0.1.0",
  "environment": {"mason": "any"},
  "vars": {}
});
