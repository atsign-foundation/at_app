// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint, implicit_dynamic_list_literal, implicit_dynamic_map_literal, inference_failure_on_collection_literal

import 'package:mason/mason.dart';

final snackbarSenderBundle = MasonBundle.fromJson(<String, dynamic>{
  "files": [
    {
      "path": "lib/main.dart",
      "data":
          "",
      "type": "text"
    }
  ],
  "hooks": [],
  "name": "snackbar_sender",
  "description": "Send snackbars to a flutter web application publically.",
  "version": "0.1.0",
  "environment": {"mason": "any"},
  "vars": {}
});
