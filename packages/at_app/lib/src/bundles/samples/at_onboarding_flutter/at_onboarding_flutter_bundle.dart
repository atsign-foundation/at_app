// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: prefer_single_quotes, public_member_api_docs, lines_longer_than_80_chars, implicit_dynamic_list_literal, implicit_dynamic_map_literal

import 'package:mason/mason.dart';

final atOnboardingFlutterBundle = MasonBundle.fromJson(<String, dynamic>{
  "files": [
    {
      "path": "lib/contact_initial.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7CgpjbGFzcyBDb250YWN0SW5pdGlhbCBleHRlbmRzIFN0YXRlbGVzc1dpZGdldCB7CiAgZmluYWwgZG91YmxlIHNpemU7CiAgZmluYWwgU3RyaW5nIGluaXRpYWxzOwogIGZpbmFsIGludCBpbmRleDsKCiAgY29uc3QgQ29udGFjdEluaXRpYWwoe0tleSBrZXkgPSBjb25zdCBLZXkoJ2NvbnRhY3RfaW5pdGlhbCcpLCB0aGlzLnNpemUgPSA0MCwgdGhpcy5pbml0aWFscyA9ICdBVCcsIGluZGV4ID0gMn0pCiAgICAgIDogaW5kZXggPSAoaW5pdGlhbHMubGVuZ3RoIDwgMykgPyBpbml0aWFscy5sZW5ndGggOiAzLAogICAgICAgIHN1cGVyKGtleToga2V5KTsKICBAb3ZlcnJpZGUKICBXaWRnZXQgYnVpbGQoQnVpbGRDb250ZXh0IGNvbnRleHQpIHsKICAgIHJldHVybiBDb250YWluZXIoCiAgICAgIGhlaWdodDogc2l6ZSwKICAgICAgd2lkdGg6IHNpemUsCiAgICAgIGRlY29yYXRpb246IEJveERlY29yYXRpb24oCiAgICAgICAgY29sb3I6IENvbnRhY3RJbml0aWFsc0NvbG9ycy5nZXRDb2xvcihpbml0aWFscyksCiAgICAgICAgYm9yZGVyUmFkaXVzOiBCb3JkZXJSYWRpdXMuY2lyY3VsYXIoc2l6ZSksCiAgICAgICksCiAgICAgIGNoaWxkOiBDZW50ZXIoCiAgICAgICAgY2hpbGQ6IFRleHQoaW5pdGlhbHMuc3Vic3RyaW5nKChpbmRleCA9PSAxKSA/IDAgOiAxLCBpbmRleCkudG9VcHBlckNhc2UoKSwKICAgICAgICAgICAgc3R5bGU6IGNvbnN0IFRleHRTdHlsZSgKICAgICAgICAgICAgICBjb2xvcjogQ29sb3JzLndoaXRlLAogICAgICAgICAgICAgIGZvbnRTaXplOiAxMi4wLAogICAgICAgICAgICAgIGxldHRlclNwYWNpbmc6IDAuMSwKICAgICAgICAgICAgICBmb250V2VpZ2h0OiBGb250V2VpZ2h0Lnc3MDAsCiAgICAgICAgICAgICkpLAogICAgICApLAogICAgKTsKICB9Cn0KCmNsYXNzIENvbnRhY3RJbml0aWFsc0NvbG9ycyB7CiAgc3RhdGljIENvbG9yIGdldENvbG9yKFN0cmluZyBhdHNpZ24pIHsKICAgIGlmIChhdHNpZ24ubGVuZ3RoID09IDEpIHsKICAgICAgYXRzaWduID0gYXRzaWduICsgJyAnOwogICAgfQogICAgc3dpdGNoIChhdHNpZ25bMV0udG9VcHBlckNhc2UoKSkgewogICAgICBjYXNlICdBJzoKICAgICAgICByZXR1cm4gY29uc3QgQ29sb3IoMHhGRkFBMERGRSk7CiAgICAgIGNhc2UgJ0InOgogICAgICAgIHJldHVybiBjb25zdCBDb2xvcigweEZGMzI4M0ZFKTsKICAgICAgY2FzZSAnQyc6CiAgICAgICAgcmV0dXJuIGNvbnN0IENvbG9yKDB4RkY4NTY2MEQpOwogICAgICBjYXNlICdEJzoKICAgICAgICByZXR1cm4gY29uc3QgQ29sb3IoMHhGRjc4MkFCNik7CiAgICAgIGNhc2UgJ0UnOgogICAgICAgIHJldHVybiBjb25zdCBDb2xvcigweEZGNTY1NjU2KTsKICAgICAgY2FzZSAnRic6CiAgICAgICAgcmV0dXJuIGNvbnN0IENvbG9yKDB4RkYxQzgzNTYpOwogICAgICBjYXNlICdHJzoKICAgICAgICByZXR1cm4gY29uc3QgQ29sb3IoMHhGRjE2RkYzMik7CiAgICAgIGNhc2UgJ0gnOgogICAgICAgIHJldHVybiBjb25zdCBDb2xvcigweEZGRjdFMUEwKTsKICAgICAgY2FzZSAnSSc6CiAgICAgICAgcmV0dXJuIGNvbnN0IENvbG9yKDB4RkZFMkUyRTIpOwogICAgICBjYXNlICdKJzoKICAgICAgICByZXR1cm4gY29uc3QgQ29sb3IoMHhGRjFDQkU0Rik7CiAgICAgIGNhc2UgJ0snOgogICAgICAgIHJldHVybiBjb25zdCBDb2xvcigweEZGQzQ0NTFDKTsKICAgICAgY2FzZSAnTCc6CiAgICAgICAgcmV0dXJuIGNvbnN0IENvbG9yKDB4RkZERUEwRkQpOwogICAgICBjYXNlICdNJzoKICAgICAgICByZXR1cm4gY29uc3QgQ29sb3IoMHhGRkZFMDBGQSk7CiAgICAgIGNhc2UgJ04nOgogICAgICAgIHJldHVybiBjb25zdCBDb2xvcigweEZGMzI1QTlCKTsKICAgICAgY2FzZSAnTyc6CiAgICAgICAgcmV0dXJuIGNvbnN0IENvbG9yKDB4RkZGRUFGMTYpOwogICAgICBjYXNlICdQJzoKICAgICAgICByZXR1cm4gY29uc3QgQ29sb3IoMHhGRkY4QTE5Rik7CiAgICAgIGNhc2UgJ1EnOgogICAgICAgIHJldHVybiBjb25zdCBDb2xvcigweEZGOTBBRDFDKTsKICAgICAgY2FzZSAnUic6CiAgICAgICAgcmV0dXJuIGNvbnN0IENvbG9yKDB4RkZGNjIyMkUpOwogICAgICBjYXNlICdTJzoKICAgICAgICByZXR1cm4gY29uc3QgQ29sb3IoMHhGRjFDRkZDRSk7CiAgICAgIGNhc2UgJ1QnOgogICAgICAgIHJldHVybiBjb25zdCBDb2xvcigweEZGMkVEOUZGKTsKICAgICAgY2FzZSAnVSc6CiAgICAgICAgcmV0dXJuIGNvbnN0IENvbG9yKDB4RkZCMTBEQTEpOwogICAgICBjYXNlICdWJzoKICAgICAgICByZXR1cm4gY29uc3QgQ29sb3IoMHhGRkMwNzVBNik7CiAgICAgIGNhc2UgJ1cnOgogICAgICAgIHJldHVybiBjb25zdCBDb2xvcigweEZGRkMxQ0JGKTsKICAgICAgY2FzZSAnWCc6CiAgICAgICAgcmV0dXJuIGNvbnN0IENvbG9yKDB4RkZCMDAwNjgpOwogICAgICBjYXNlICdZJzoKICAgICAgICByZXR1cm4gY29uc3QgQ29sb3IoMHhGRkZCRTQyNik7CiAgICAgIGNhc2UgJ1onOgogICAgICAgIHJldHVybiBjb25zdCBDb2xvcigweEZGRkEwMDg3KTsKICAgICAgY2FzZSAnQCc6CiAgICAgICAgcmV0dXJuIGNvbnN0IENvbG9yKDB4RkZBQTBERkUpOwoKICAgICAgZGVmYXVsdDoKICAgICAgICByZXR1cm4gY29uc3QgQ29sb3IoMHhGRkFBMERGRSk7CiAgICB9CiAgfQp9Cg==",
      "type": "text"
    },
    {
      "path": "lib/main.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmFzeW5jJzsKCmltcG9ydCAncGFja2FnZTphdF9jbGllbnRfbW9iaWxlL2F0X2NsaWVudF9tb2JpbGUuZGFydCc7CmltcG9ydCAncGFja2FnZTphdF9vbmJvYXJkaW5nX2ZsdXR0ZXIvYXRfb25ib2FyZGluZ19mbHV0dGVyLmRhcnQnIHNob3cgT25ib2FyZGluZzsKaW1wb3J0ICdwYWNrYWdlOmF0X29uYm9hcmRpbmdfZmx1dHRlci93aWRnZXRzL2N1c3RvbV9yZXNldF9idXR0b24uZGFydCc7CmltcG9ydCAncGFja2FnZTphdF91dGlscy9hdF9sb2dnZXIuZGFydCcgc2hvdyBBdFNpZ25Mb2dnZXI7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6cGF0aF9wcm92aWRlci9wYXRoX3Byb3ZpZGVyLmRhcnQnIHNob3cgZ2V0QXBwbGljYXRpb25TdXBwb3J0RGlyZWN0b3J5OwoKaW1wb3J0ICdwYWNrYWdlOmF0X2FwcF9mbHV0dGVyL2F0X2FwcF9mbHV0dGVyLmRhcnQnIHNob3cgQXRFbnY7CgppbXBvcnQgJ3N3aXRjaF9hdHNpZ24uZGFydCc7CmltcG9ydCAndGhlbWUuZGFydCc7CgpGdXR1cmU8dm9pZD4gbWFpbigpIGFzeW5jIHsKICBhd2FpdCBBdEVudi5sb2FkKCk7CiAgcnVuQXBwKGNvbnN0IE15QXBwKCkpOwp9CgpGdXR1cmU8QXRDbGllbnRQcmVmZXJlbmNlPiBsb2FkQXRDbGllbnRQcmVmZXJlbmNlKCkgYXN5bmMgewogIHZhciBkaXIgPSBhd2FpdCBnZXRBcHBsaWNhdGlvblN1cHBvcnREaXJlY3RvcnkoKTsKICByZXR1cm4gQXRDbGllbnRQcmVmZXJlbmNlKCkKICAgICAgICAuLnJvb3REb21haW4gPSBBdEVudi5yb290RG9tYWluCiAgICAgICAgLi5uYW1lc3BhY2UgPSBBdEVudi5hcHBOYW1lc3BhY2UKICAgICAgICAuLmhpdmVTdG9yYWdlUGF0aCA9IGRpci5wYXRoCiAgICAgICAgLi5jb21taXRMb2dQYXRoID0gZGlyLnBhdGgKICAgICAgICAuLmlzTG9jYWxTdG9yZVJlcXVpcmVkID0gdHJ1ZQogICAgICAvLyBUT0RPIHNldCB0aGUgcmVzdCBvZiB5b3VyIEF0Q2xpZW50UHJlZmVyZW5jZSBoZXJlCiAgICAgIDsKfQoKZmluYWwgU3RyZWFtQ29udHJvbGxlcjxUaGVtZU1vZGU+IHVwZGF0ZVRoZW1lTW9kZSA9IFN0cmVhbUNvbnRyb2xsZXI8VGhlbWVNb2RlPi5icm9hZGNhc3QoKTsKCmNsYXNzIE15QXBwIGV4dGVuZHMgU3RhdGVmdWxXaWRnZXQgewogIGNvbnN0IE15QXBwKHtLZXk/IGtleX0pIDogc3VwZXIoa2V5OiBrZXkpOwogIEBvdmVycmlkZQogIF9NeUFwcFN0YXRlIGNyZWF0ZVN0YXRlKCkgPT4gX015QXBwU3RhdGUoKTsKfQoKY2xhc3MgX015QXBwU3RhdGUgZXh0ZW5kcyBTdGF0ZTxNeUFwcD4gewogIC8vICogbG9hZCB0aGUgQXRDbGllbnRQcmVmZXJlbmNlIGluIHRoZSBiYWNrZ3JvdW5kCiAgRnV0dXJlPEF0Q2xpZW50UHJlZmVyZW5jZT4gZnV0dXJlUHJlZmVyZW5jZSA9IGxvYWRBdENsaWVudFByZWZlcmVuY2UoKTsKICBBdENsaWVudFByZWZlcmVuY2U/IGF0Q2xpZW50UHJlZmVyZW5jZTsKCiAgZmluYWwgQXRTaWduTG9nZ2VyIF9sb2dnZXIgPSBBdFNpZ25Mb2dnZXIoQXRFbnYuYXBwTmFtZXNwYWNlKTsKCiAgQG92ZXJyaWRlCiAgV2lkZ2V0IGJ1aWxkKEJ1aWxkQ29udGV4dCBjb250ZXh0KSB7CiAgICByZXR1cm4gU3RyZWFtQnVpbGRlcjxUaGVtZU1vZGU+KAogICAgICBzdHJlYW06IHVwZGF0ZVRoZW1lTW9kZS5zdHJlYW0sCiAgICAgIGluaXRpYWxEYXRhOiBUaGVtZU1vZGUubGlnaHQsCiAgICAgIGJ1aWxkZXI6IChCdWlsZENvbnRleHQgY29udGV4dCwgQXN5bmNTbmFwc2hvdDxUaGVtZU1vZGU+IHNuYXBzaG90KSB7CiAgICAgICAgVGhlbWVNb2RlIHRoZW1lTW9kZSA9IHNuYXBzaG90LmRhdGEgPz8gVGhlbWVNb2RlLmxpZ2h0OwogICAgICAgIHJldHVybiBNYXRlcmlhbEFwcCgKICAgICAgICAgIC8vICogVGhlIG9uYm9hcmRpbmcgc2NyZWVuIChmaXJzdCBzY3JlZW4pCiAgICAgICAgICB0aGVtZTogbGlnaHRUaGVtZS5jb3B5V2l0aChjb2xvclNjaGVtZTogbGlnaHRUaGVtZS5jb2xvclNjaGVtZS5jb3B5V2l0aChzZWNvbmRhcnk6IENvbG9ycy5ibGFjaykpLAogICAgICAgICAgZGFya1RoZW1lOiBkYXJrVGhlbWUuY29weVdpdGgoCiAgICAgICAgICAgIGNvbG9yU2NoZW1lOiBkYXJrVGhlbWUuY29sb3JTY2hlbWUuY29weVdpdGgoc2Vjb25kYXJ5OiBDb2xvcnMud2hpdGUpLAogICAgICAgICAgKSwKICAgICAgICAgIHRoZW1lTW9kZTogdGhlbWVNb2RlLAogICAgICAgICAgaG9tZTogU2NhZmZvbGQoCiAgICAgICAgICAgIGFwcEJhcjogQXBwQmFyKAogICAgICAgICAgICAgIHRpdGxlOiBjb25zdCBUZXh0KCdNeUFwcCcpLAogICAgICAgICAgICAgIGFjdGlvbnM6IDxXaWRnZXQ+WwogICAgICAgICAgICAgICAgSWNvbkJ1dHRvbigKICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiAoKSB7CiAgICAgICAgICAgICAgICAgICAgdXBkYXRlVGhlbWVNb2RlLnNpbmsuYWRkKHRoZW1lTW9kZSA9PSBUaGVtZU1vZGUubGlnaHQgPyBUaGVtZU1vZGUuZGFyayA6IFRoZW1lTW9kZS5saWdodCk7CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIGljb246IEljb24oCiAgICAgICAgICAgICAgICAgICAgVGhlbWUub2YoY29udGV4dCkuYnJpZ2h0bmVzcyA9PSBCcmlnaHRuZXNzLmxpZ2h0CiAgICAgICAgICAgICAgICAgICAgICAgID8gSWNvbnMuZGFya19tb2RlX291dGxpbmVkCiAgICAgICAgICAgICAgICAgICAgICAgIDogSWNvbnMubGlnaHRfbW9kZV9vdXRsaW5lZCwKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICApLAogICAgICAgICAgICBib2R5OiBCdWlsZGVyKAogICAgICAgICAgICAgIGJ1aWxkZXI6IChjb250ZXh0KSA9PiBDZW50ZXIoCiAgICAgICAgICAgICAgICBjaGlsZDogQ29sdW1uKAogICAgICAgICAgICAgICAgICBjaGlsZHJlbjogWwogICAgICAgICAgICAgICAgICAgIEVsZXZhdGVkQnV0dG9uKAogICAgICAgICAgICAgICAgICAgICAgb25QcmVzc2VkOiAoKSBhc3luYyB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcmVmZXJlbmNlID0gYXdhaXQgZnV0dXJlUHJlZmVyZW5jZTsKICAgICAgICAgICAgICAgICAgICAgICAgc2V0U3RhdGUoKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgIGF0Q2xpZW50UHJlZmVyZW5jZSA9IHByZWZlcmVuY2U7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICBPbmJvYXJkaW5nKAogICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXRDbGllbnRQcmVmZXJlbmNlOiBhdENsaWVudFByZWZlcmVuY2UhLAogICAgICAgICAgICAgICAgICAgICAgICAgIGRvbWFpbjogQXRFbnYucm9vdERvbWFpbiwKICAgICAgICAgICAgICAgICAgICAgICAgICByb290RW52aXJvbm1lbnQ6IEF0RW52LnJvb3RFbnZpcm9ubWVudCwKICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBBUElLZXk6IEF0RW52LmFwcEFwaUtleSwKICAgICAgICAgICAgICAgICAgICAgICAgICBvbmJvYXJkOiAodmFsdWUsIGF0c2lnbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2xvZ2dlci5maW5lcignU3VjY2Vzc2Z1bGx5IG9uYm9hcmRlZCAkYXRzaWduJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yOiAoZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sb2dnZXIuc2V2ZXJlKCdPbmJvYXJkaW5nIHRocm93cyAkZXJyb3IgZXJyb3InKTsKICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRTY3JlZW46IGNvbnN0IEhvbWVTY3JlZW4oKSwKICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICBjaGlsZDogY29uc3QgVGV4dCgnT25ib2FyZCBhbiBAc2lnbicpLAogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgY29uc3QgQ3VzdG9tUmVzZXRCdXR0b24oCiAgICAgICAgICAgICAgICAgICAgICBidXR0b25UZXh0OiAnUmVzZXQnLAogICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDkwLAogICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiA0MCwKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICApLAogICAgICAgICAgICApLAogICAgICAgICAgKSwKICAgICAgICApOwogICAgICB9LAogICAgKTsKICB9Cn0KCi8vKiBUaGUgbmV4dCBzY3JlZW4gYWZ0ZXIgb25ib2FyZGluZyAoc2Vjb25kIHNjcmVlbikKY2xhc3MgSG9tZVNjcmVlbiBleHRlbmRzIFN0YXRlbGVzc1dpZGdldCB7CiAgY29uc3QgSG9tZVNjcmVlbih7S2V5PyBrZXl9KSA6IHN1cGVyKGtleToga2V5KTsKCiAgQG92ZXJyaWRlCiAgV2lkZ2V0IGJ1aWxkKEJ1aWxkQ29udGV4dCBjb250ZXh0KSB7CiAgICAvLy8gR2V0IHRoZSBBdENsaWVudE1hbmFnZXIgaW5zdGFuY2UKICAgIHZhciBhdENsaWVudE1hbmFnZXIgPSBBdENsaWVudE1hbmFnZXIuZ2V0SW5zdGFuY2UoKTsKCiAgICByZXR1cm4gU2NhZmZvbGQoCiAgICAgIGFwcEJhcjogQXBwQmFyKAogICAgICAgIHRpdGxlOiBjb25zdCBUZXh0KCdEYXNoYm9hcmQnKSwKICAgICAgICBhY3Rpb25zOiA8V2lkZ2V0PlsKICAgICAgICAgIEljb25CdXR0b24oCiAgICAgICAgICAgIGljb246IGNvbnN0IEljb24oSWNvbnMuc3dpdGNoX2FjY291bnQpLAogICAgICAgICAgICB0b29sdGlwOiAnU3dpdGNoIEBzaWduJywKICAgICAgICAgICAgb25QcmVzc2VkOiAoKSBhc3luYyB7CiAgICAgICAgICAgICAgdmFyIGF0U2lnbkxpc3QgPSBhd2FpdCBLZXljaGFpblV0aWwuZ2V0QXRzaWduTGlzdCgpOwogICAgICAgICAgICAgIGF3YWl0IHNob3dNb2RhbEJvdHRvbVNoZWV0KAogICAgICAgICAgICAgICAgY29udGV4dDogY29udGV4dCwKICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogQ29sb3JzLnRyYW5zcGFyZW50LAogICAgICAgICAgICAgICAgYnVpbGRlcjogKGNvbnRleHQpID0+IEF0U2lnbkJvdHRvbVNoZWV0KGF0U2lnbkxpc3Q6IGF0U2lnbkxpc3QgPz8gW10pLAogICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICApLAogICAgICAgIF0sCiAgICAgICksCiAgICAgIGJvZHk6IENlbnRlcigKICAgICAgICBjaGlsZDogQ29sdW1uKAogICAgICAgICAgY2hpbGRyZW46IFsKICAgICAgICAgICAgY29uc3QgVGV4dCgnU3VjY2Vzc2Z1bGx5IG9uYm9hcmRlZCBhbmQgbmF2aWdhdGVkIHRvIEZpcnN0QXBwU2NyZWVuJyksCgogICAgICAgICAgICAvLy8gVXNlIHRoZSBBdENsaWVudE1hbmFnZXIgaW5zdGFuY2UgdG8gZ2V0IHRoZSBjdXJyZW50IGF0c2lnbgogICAgICAgICAgICBUZXh0KCdDdXJyZW50IEBzaWduOiAke2F0Q2xpZW50TWFuYWdlci5hdENsaWVudC5nZXRDdXJyZW50QXRTaWduKCl9JyksCiAgICAgICAgICBdLAogICAgICAgICksCiAgICAgICksCiAgICApOwogIH0KfQo=",
      "type": "text"
    },
    {
      "path": "lib/switch_atsign.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "lib/theme.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOmZsdXR0ZXIvbWF0ZXJpYWwuZGFydCc7CgpUaGVtZURhdGEgbGlnaHRUaGVtZSA9IFRoZW1lRGF0YSgKICBicmlnaHRuZXNzOiBCcmlnaHRuZXNzLmxpZ2h0LAogIHByaW1hcnlDb2xvcjogY29uc3QgQ29sb3IoMHhGRmY0NTMzZCksCiAgYmFja2dyb3VuZENvbG9yOiBDb2xvcnMud2hpdGUsCiAgc2NhZmZvbGRCYWNrZ3JvdW5kQ29sb3I6IENvbG9ycy53aGl0ZSwKKTsKClRoZW1lRGF0YSBkYXJrVGhlbWUgPSBUaGVtZURhdGEoCiAgYnJpZ2h0bmVzczogQnJpZ2h0bmVzcy5kYXJrLAogIHByaW1hcnlDb2xvcjogQ29sb3JzLmJsdWUsCiAgYmFja2dyb3VuZENvbG9yOiBDb2xvcnMuZ3JleVs4NTBdLAogIHNjYWZmb2xkQmFja2dyb3VuZENvbG9yOiBDb2xvcnMuZ3JleVs4NTBdLAopOwo=",
      "type": "text"
    }
  ],
  "hooks": [],
  "name": "at_onboarding_flutter",
  "description": "A sample of how to use the at_onboarding_flutter package.",
  "version": "0.1.0",
  "environment": {"mason": "any"},
  "vars": {}
});
