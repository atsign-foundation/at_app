// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: prefer_single_quotes, public_member_api_docs, lines_longer_than_80_chars, implicit_dynamic_list_literal, implicit_dynamic_map_literal

import 'package:mason/mason.dart';

final atChatFlutterBundle = MasonBundle.fromJson(<String, dynamic>{
  "files": [
    {
      "path": "lib/main.dart",
      "data":
          "aW1wb3J0ICdkYXJ0OmFzeW5jJzsKCmltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6YXRfY2xpZW50X21vYmlsZS9hdF9jbGllbnRfbW9iaWxlLmRhcnQnOwppbXBvcnQgJ3BhY2thZ2U6YXRfb25ib2FyZGluZ19mbHV0dGVyL2F0X29uYm9hcmRpbmdfZmx1dHRlci5kYXJ0JwogICAgc2hvdyBPbmJvYXJkaW5nOwppbXBvcnQgJ3BhY2thZ2U6YXRfdXRpbHMvYXRfbG9nZ2VyLmRhcnQnIHNob3cgQXRTaWduTG9nZ2VyOwppbXBvcnQgJ3BhY2thZ2U6cGF0aF9wcm92aWRlci9wYXRoX3Byb3ZpZGVyLmRhcnQnCiAgICBzaG93IGdldEFwcGxpY2F0aW9uU3VwcG9ydERpcmVjdG9yeTsKaW1wb3J0ICdwYWNrYWdlOmF0X2FwcF9mbHV0dGVyL2F0X2FwcF9mbHV0dGVyLmRhcnQnIHNob3cgQXRFbnY7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyX2tleWNoYWluL2ZsdXR0ZXJfa2V5Y2hhaW4uZGFydCc7CgppbXBvcnQgJ3NlY29uZF9zY3JlZW4uZGFydCc7CgpGdXR1cmU8dm9pZD4gbWFpbigpIGFzeW5jIHsKICBhd2FpdCBBdEVudi5sb2FkKCk7CiAgcnVuQXBwKGNvbnN0IE15QXBwKCkpOwp9CgpGdXR1cmU8QXRDbGllbnRQcmVmZXJlbmNlPiBsb2FkQXRDbGllbnRQcmVmZXJlbmNlKCkgYXN5bmMgewogIHZhciBkaXIgPSBhd2FpdCBnZXRBcHBsaWNhdGlvblN1cHBvcnREaXJlY3RvcnkoKTsKICByZXR1cm4gQXRDbGllbnRQcmVmZXJlbmNlKCkKICAgIC4ucm9vdERvbWFpbiA9IEF0RW52LnJvb3REb21haW4KICAgIC4ubmFtZXNwYWNlID0gQXRFbnYuYXBwTmFtZXNwYWNlCiAgICAuLmhpdmVTdG9yYWdlUGF0aCA9IGRpci5wYXRoCiAgICAuLmNvbW1pdExvZ1BhdGggPSBkaXIucGF0aAogICAgLi5pc0xvY2FsU3RvcmVSZXF1aXJlZCA9IHRydWU7Cn0KCmNsYXNzIE15QXBwIGV4dGVuZHMgU3RhdGVmdWxXaWRnZXQgewogIGNvbnN0IE15QXBwKHtLZXk/IGtleX0pIDogc3VwZXIoa2V5OiBrZXkpOwogIEBvdmVycmlkZQogIF9NeUFwcFN0YXRlIGNyZWF0ZVN0YXRlKCkgPT4gX015QXBwU3RhdGUoKTsKfQoKY2xhc3MgX015QXBwU3RhdGUgZXh0ZW5kcyBTdGF0ZTxNeUFwcD4gewogIC8vICogbG9hZCB0aGUgQXRDbGllbnRQcmVmZXJlbmNlIGluIHRoZSBiYWNrZ3JvdW5kCiAgRnV0dXJlPEF0Q2xpZW50UHJlZmVyZW5jZT4gZnV0dXJlUHJlZmVyZW5jZSA9IGxvYWRBdENsaWVudFByZWZlcmVuY2UoKTsKICBBdENsaWVudFByZWZlcmVuY2U/IGF0Q2xpZW50UHJlZmVyZW5jZTsKICBBdENsaWVudFNlcnZpY2U/IGF0Q2xpZW50U2VydmljZTsKCiAgZmluYWwgQXRTaWduTG9nZ2VyIF9sb2dnZXIgPSBBdFNpZ25Mb2dnZXIoQXRFbnYuYXBwTmFtZXNwYWNlKTsKCiAgQG92ZXJyaWRlCiAgV2lkZ2V0IGJ1aWxkKEJ1aWxkQ29udGV4dCBjb250ZXh0KSB7CiAgICByZXR1cm4gTWF0ZXJpYWxBcHAoCiAgICAgIC8vICogVGhlIG9uYm9hcmRpbmcgc2NyZWVuIChmaXJzdCBzY3JlZW4pCiAgICAgIGhvbWU6IFNjYWZmb2xkKAogICAgICAgICAgYXBwQmFyOiBBcHBCYXIoCiAgICAgICAgICAgIHRpdGxlOiBjb25zdCBUZXh0KCdQbHVnaW4gZXhhbXBsZSBhcHAnKSwKICAgICAgICAgICksCiAgICAgICAgICBib2R5OiBCdWlsZGVyKAogICAgICAgICAgICBidWlsZGVyOiAoY29udGV4dCkgPT4gQ29sdW1uKAogICAgICAgICAgICAgIGNoaWxkcmVuOiBbCiAgICAgICAgICAgICAgICBjb25zdCBTaXplZEJveCgKICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyNSwKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBDb250YWluZXIoCiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogY29uc3QgRWRnZUluc2V0cy5hbGwoMTAuMCksCiAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IGNvbnN0IENlbnRlcigKICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBUZXh0KAogICAgICAgICAgICAgICAgICAgICAgICAgICdBIGNsaWVudCBzZXJ2aWNlIHNob3VsZCBjcmVhdGUgYW4gYXRDbGllbnQgaW5zdGFuY2UgYW5kIGNhbGwgb25ib2FyZCBtZXRob2QgYmVmb3JlIG5hdmlnYXRpbmcgdG8gUVIgc2Nhbm5lciBzY3JlZW4nLAogICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRBbGlnbjogVGV4dEFsaWduLmNlbnRlciksCiAgICAgICAgICAgICAgICAgICAgKSksCiAgICAgICAgICAgICAgICBjb25zdCBTaXplZEJveCgKICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAyNSwKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBDZW50ZXIoCiAgICAgICAgICAgICAgICAgIGNoaWxkOiBFbGV2YXRlZEJ1dHRvbigKICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6ICgpIGFzeW5jIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBwcmVmZXJlbmNlID0gYXdhaXQgZnV0dXJlUHJlZmVyZW5jZTsKICAgICAgICAgICAgICAgICAgICAgIHNldFN0YXRlKCgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXRDbGllbnRQcmVmZXJlbmNlID0gcHJlZmVyZW5jZTsKICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgT25ib2FyZGluZygKICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dDogY29udGV4dCwKICAgICAgICAgICAgICAgICAgICAgICAgYXRDbGllbnRQcmVmZXJlbmNlOiBhdENsaWVudFByZWZlcmVuY2UhLAogICAgICAgICAgICAgICAgICAgICAgICBkb21haW46IEF0RW52LnJvb3REb21haW4sCiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3RFbnZpcm9ubWVudDogQXRFbnYucm9vdEVudmlyb25tZW50LAogICAgICAgICAgICAgICAgICAgICAgICBhcHBBUElLZXk6ICc0NzdiLTg3NnUtYmNlei1jNDJ6LTZhM2QnLAogICAgICAgICAgICAgICAgICAgICAgICBvbmJvYXJkOiAoTWFwPFN0cmluZz8sIEF0Q2xpZW50U2VydmljZT4gdmFsdWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdHJpbmc/IGF0c2lnbikgYXN5bmMgewogICAgICAgICAgICAgICAgICAgICAgICAgIGF0Q2xpZW50U2VydmljZSA9IHZhbHVlW2F0c2lnbl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgTmF2aWdhdG9yLnB1c2hSZXBsYWNlbWVudCgKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0ZXJpYWxQYWdlUm91dGUoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWlsZGVyOiAoY29udGV4dCkgPT4gY29uc3QgU2Vjb25kU2NyZWVuKCkpKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgb25FcnJvcjogKGVycm9yKSBhc3luYyB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgX2xvZ2dlci5zZXZlcmUoJ09uYm9hcmRpbmcgdGhyb3dzICRlcnJvciBlcnJvcicpOwogICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHNob3dEaWFsb2coCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IGNvbnRleHQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1aWxkZXI6IChCdWlsZENvbnRleHQgY29udGV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBBbGVydERpYWxvZygKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGNvbnN0IFRleHQoJ1NvbWV0aGluZyB3ZW50IHdyb25nJyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25zOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRleHRCdXR0b24oCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6ICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTmF2aWdhdG9yLm9mKGNvbnRleHQpLnBvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkOiBjb25zdCBUZXh0KCdvaycpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBjaGlsZDogY29uc3QgVGV4dCgnU3RhcnQgb25ib2FyZGluZycpLAogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIGNvbnN0IFNpemVkQm94KAogICAgICAgICAgICAgICAgICBoZWlnaHQ6IDI1LAogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIENlbnRlcigKICAgICAgICAgICAgICAgICAgICBjaGlsZDogVGV4dEJ1dHRvbigKICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IEJ1dHRvblN0eWxlKAogICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0ZXJpYWxTdGF0ZVByb3BlcnR5LmFsbDxDb2xvcj4oQ29sb3JzLmJsYWNrMTIpLAogICAgICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgICAgICBvblByZXNzZWQ6ICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBGbHV0dGVyS2V5Y2hhaW4ucmVtb3ZlKGtleTogJ0BhdHNpZ24nKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQ6IGNvbnN0IFRleHQoJ0NsZWFyIHBhaXJlZCBhdHNpZ25zJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBUZXh0U3R5bGUoY29sb3I6IENvbG9ycy5ibGFjaykpKSksCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgKSwKICAgICAgICAgICkpLAogICAgKTsKICB9Cn0K",
      "type": "text"
    },
    {
      "path": "lib/second_screen.dart",
      "data":
          "",
      "type": "text"
    },
    {
      "path": "lib/third_screen.dart",
      "data":
          "aW1wb3J0ICdwYWNrYWdlOmF0X2NoYXRfZmx1dHRlci9hdF9jaGF0X2ZsdXR0ZXIuZGFydCc7CmltcG9ydCAncGFja2FnZTpmbHV0dGVyL21hdGVyaWFsLmRhcnQnOwoKY2xhc3MgVGhpcmRTY3JlZW4gZXh0ZW5kcyBTdGF0ZWZ1bFdpZGdldCB7CiAgY29uc3QgVGhpcmRTY3JlZW4oe0tleT8ga2V5fSkgOiBzdXBlcihrZXk6IGtleSk7CgogIEBvdmVycmlkZQogIF9UaGlyZFNjcmVlblN0YXRlIGNyZWF0ZVN0YXRlKCkgPT4gX1RoaXJkU2NyZWVuU3RhdGUoKTsKfQoKY2xhc3MgX1RoaXJkU2NyZWVuU3RhdGUgZXh0ZW5kcyBTdGF0ZTxUaGlyZFNjcmVlbj4gewogIEBvdmVycmlkZQogIFdpZGdldCBidWlsZChCdWlsZENvbnRleHQgY29udGV4dCkgewogICAgcmV0dXJuIFNjYWZmb2xkKAogICAgICBhcHBCYXI6IEFwcEJhcih0aXRsZTogY29uc3QgVGV4dCgnQ2hhdCBTY3JlZW4nKSwgYWN0aW9uczogPFdpZGdldD5bCiAgICAgICAgSWNvbkJ1dHRvbigKICAgICAgICAgIGljb246IGNvbnN0IEljb24oSWNvbnMuZGVsZXRlKSwKICAgICAgICAgIHRvb2x0aXA6ICdTaG93IFNuYWNrYmFyJywKICAgICAgICAgIG9uUHJlc3NlZDogKCkgYXN5bmMgewogICAgICAgICAgICBmaW5hbCBjb25maXJtZWQgPSBhd2FpdCBjb25maXJtKAogICAgICAgICAgICAgIHRoaXMuY29udGV4dCwKICAgICAgICAgICAgICB0aXRsZTogJ0NvbmZpcm0gRGlhbG9nJywKICAgICAgICAgICAgICBtZXNzYWdlOiAnRG8geW91IHdhbnQgdG8gZGVsZXRlIHRoaXMgY2hhdD8nLAogICAgICAgICAgICAgIHBvc2l0aXZlQWN0aW9uVGl0bGU6ICdZZXMnLAogICAgICAgICAgICAgIG5lZ2F0aXZlQWN0aW9uVGl0bGU6ICdObycsCiAgICAgICAgICAgICk7CiAgICAgICAgICAgIGlmICghY29uZmlybWVkKSByZXR1cm47CgogICAgICAgICAgICB2YXIgcmVzdWx0ID0gYXdhaXQgZGVsZXRlTWVzc2FnZXMoKTsKICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSByZXN1bHQgPyAnTWVzc2FnZXMgYXJlIGRlbGV0ZWQnIDogJ0ZhaWxlZCB0byBkZWxldGUnOwogICAgICAgICAgICBTY2FmZm9sZE1lc3Nlbmdlci5vZihjb250ZXh0KQogICAgICAgICAgICAgICAgLnNob3dTbmFja0JhcihTbmFja0Jhcihjb250ZW50OiBUZXh0KG1lc3NhZ2UpKSk7CiAgICAgICAgICB9LAogICAgICAgICksCiAgICAgIF0pLAogICAgICBib2R5OiBDaGF0U2NyZWVuKAogICAgICAgIGhlaWdodDogTWVkaWFRdWVyeS5vZihjb250ZXh0KS5zaXplLmhlaWdodCwKICAgICAgICBpbmNvbWluZ01lc3NhZ2VDb2xvcjogQ29sb3JzLmJsdWVbMTAwXSEsCiAgICAgICAgb3V0Z29pbmdNZXNzYWdlQ29sb3I6IENvbG9ycy5ncmVlblsxMDBdISwKICAgICAgICBpc1NjcmVlbjogdHJ1ZSwKICAgICAgKSwKICAgICk7CiAgfQp9Cg==",
      "type": "text"
    }
  ],
  "hooks": [],
  "name": "at_chat_flutter",
  "description": "A sample of how to use the at_chat_flutter package.",
  "version": "0.1.0",
  "environment": {"mason": "any"},
  "vars": {}
});
