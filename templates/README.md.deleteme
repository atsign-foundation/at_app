# Templates

## Overview

This flutter project contains the raw templates used by the at_app package, see [here](https://pub.dev/packages/at_app) for more information.

## How to create a template

**Note:**  
This guide is specifically for templates that belong to at_app.
If you are seeking help with usage on at_app_create, see its documentation, or you may also use the at_app package as a reference.

### Definitions

There are a few variables defined in this guide, that may change depending on the template you are creating:

**\<template-type>** - for at_app this can one of demo, sample, or template:

| Type     | What this type is for                               |
| -------- | --------------------------------------------------- |
| demo     | A complete, standalone atPlatform demo application. |
| sample   | An example application for an atPlatform package.   |
| template | A starter template for an atPlatform application.   |


**\<template-name>** - The name of your template, this should be defined in **snake_case** unless specified otherwise:

When choosing a template name, make sure it is unique regardless of the template type.
For example, this pipeline **will not** support both a demo called `chit_chat` and a template called `chit_chat`

### 1. Install and bootstrap melos
```sh
dart pub global activate melos
melos bootstrap
```
### 2. Setup the template structure

In `templates/lib` choose the appropriate **\<template-type>** folder:
- demos
- samples
- templates

In the **\<template-type>** folder, create a new folder for your template called **\<template-name>**.

In the **\<template-name>** folder, create another folder called `__brick__`, and two files called `brick.yaml`, and `pubspec.yaml`.

### 3. Configure brick.yaml

You need to include the following fields:
- name - the **\<template-name>**
- description - a description of what the template is for  
  N.B. this is publicly visible in at_app!
- version - for now, leave it as 0.1.0
- vars - You can leave this empty.

### 4. Configure pubspec.yaml

This file provides configuration options for the app output.

N.B. Use Visual Studio Code in order to benefit from auto-completion in this file.

Here is the schema:
- name: Set this to `<template-name>_template`
- publish_to: Set this to `none`
- environment: The flutter sdk environment, add `sdk: '>=2.12.0 <3.0.0'`
- dependencies: copy from pubspec.yaml
- env
  - include: boolean  
    Whether the template should allow/include the .env file
  - gitignore: boolean  
    Whether to ignore the .env file - this one is a WIP
  - override: boolean  
    Whether to use the env_override parameters as default values for .env
- env_override
  - NAMESPACE: your namespace @sign without the ‘@’
  - ROOT_DOMAIN: a default root domain - if you don’t specify this it will use prod
  - API_KEY: an api key for onboarding
- android
  - enableR8: boolean
  - gradleVersion: string
  - kotlinVersion: string
  - minSdkVersion: string
  - targetSdkVersion: string
  - compileSdkVersion: string

> N.B. If you enabled env_override with a NAMESPACE, make sure to register it in [NAMESPACES.md](./NAMESPACES.md)

### 5. Add your code to \_\_brick__

Add your additional files and assets to this folder.

Keep in mind that the `__brick__` folder represents the root of the project, so add your code to `__brick__/lib`.

> N.B. Be careful not to overwrite files that will already be generated by the base templates. (pubspec.yaml, .gitignore, README.md, android/\**, ios/**)

> N.B. Make sure to use relative imports when referencing other files in the template.

### 6. Register your template in at_app

Before we build, we should register the template in at_app so that it is built with the rest of the pipeline:

In `packages/at_app/lib/src/templates.dart` add your template to the correct list, based on your **\<template-type>**.

Your template's variable will be **\<template-name (in camelCase)>** followed by the word `Template`.

For example: `snackbar_sender` will use the variable named `snackbarSenderTemplate`.

> N.B. If you see an error, don't worry! We haven't bundled the template into at_app yet, move to the next step to do so.

### 7. Build the at_app pipeline

Run the following command to build everything:

```sh
melos run build
```

This will take a while, so go get a cup of coffee.

First verify that there were no analysis issues in the build command.
Once all are resolved, move on to the next step.

### 8. Test your app

You app will be generated in `build/<template-name>`, give it a test run to ensure everything is working as expected.

Once it is good to go, submit a PR!

## Open source usage and contributions

This is open source code, so feel free to use it as is, suggest changes or
enhancements or create your own version. See [CONTRIBUTING.md](../CONTRIBUTING.md)
for detailed guidance on how to setup tools, tests and make a pull request.

## Maintainers

This package is currently maintained by [Xavier Chanthavong](https://github.com/xavierchanth).
